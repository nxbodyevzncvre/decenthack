// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: proto/fly_service.proto

package flight

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FlightNotificationService_NotifyStatusUpdate_FullMethodName            = "/flight.FlightNotificationService/NotifyStatusUpdate"
	FlightNotificationService_NotifyFlightStarted_FullMethodName           = "/flight.FlightNotificationService/NotifyFlightStarted"
	FlightNotificationService_UpdateDronePosition_FullMethodName           = "/flight.FlightNotificationService/UpdateDronePosition"
	FlightNotificationService_NotifyFlightCompleted_FullMethodName         = "/flight.FlightNotificationService/NotifyFlightCompleted"
	FlightNotificationService_NotifyRestrictedZoneProximity_FullMethodName = "/flight.FlightNotificationService/NotifyRestrictedZoneProximity"
)

// FlightNotificationServiceClient is the client API for FlightNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// –°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É Flight Processor –∏ Main Backend
type FlightNotificationServiceClient interface {
	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
	NotifyStatusUpdate(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*StatusUpdateResponse, error)
	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–ª–µ—Ç–∞
	NotifyFlightStarted(ctx context.Context, in *FlightStartedRequest, opts ...grpc.CallOption) (*FlightStartedResponse, error)
	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥—Ä–æ–Ω–∞
	UpdateDronePosition(ctx context.Context, in *DronePositionRequest, opts ...grpc.CallOption) (*DronePositionResponse, error)
	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–ª–µ—Ç–∞
	NotifyFlightCompleted(ctx context.Context, in *FlightCompletedRequest, opts ...grpc.CallOption) (*FlightCompletedResponse, error)
	// üö® –ù–û–í–´–ô –ú–ï–¢–û–î: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ
	NotifyRestrictedZoneProximity(ctx context.Context, in *RestrictedZoneAlertRequest, opts ...grpc.CallOption) (*RestrictedZoneAlertResponse, error)
}

type flightNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightNotificationServiceClient(cc grpc.ClientConnInterface) FlightNotificationServiceClient {
	return &flightNotificationServiceClient{cc}
}

func (c *flightNotificationServiceClient) NotifyStatusUpdate(ctx context.Context, in *StatusUpdateRequest, opts ...grpc.CallOption) (*StatusUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusUpdateResponse)
	err := c.cc.Invoke(ctx, FlightNotificationService_NotifyStatusUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightNotificationServiceClient) NotifyFlightStarted(ctx context.Context, in *FlightStartedRequest, opts ...grpc.CallOption) (*FlightStartedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlightStartedResponse)
	err := c.cc.Invoke(ctx, FlightNotificationService_NotifyFlightStarted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightNotificationServiceClient) UpdateDronePosition(ctx context.Context, in *DronePositionRequest, opts ...grpc.CallOption) (*DronePositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DronePositionResponse)
	err := c.cc.Invoke(ctx, FlightNotificationService_UpdateDronePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightNotificationServiceClient) NotifyFlightCompleted(ctx context.Context, in *FlightCompletedRequest, opts ...grpc.CallOption) (*FlightCompletedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlightCompletedResponse)
	err := c.cc.Invoke(ctx, FlightNotificationService_NotifyFlightCompleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flightNotificationServiceClient) NotifyRestrictedZoneProximity(ctx context.Context, in *RestrictedZoneAlertRequest, opts ...grpc.CallOption) (*RestrictedZoneAlertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestrictedZoneAlertResponse)
	err := c.cc.Invoke(ctx, FlightNotificationService_NotifyRestrictedZoneProximity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightNotificationServiceServer is the server API for FlightNotificationService service.
// All implementations must embed UnimplementedFlightNotificationServiceServer
// for forward compatibility.
//
// –°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É Flight Processor –∏ Main Backend
type FlightNotificationServiceServer interface {
	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
	NotifyStatusUpdate(context.Context, *StatusUpdateRequest) (*StatusUpdateResponse, error)
	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–ª–µ—Ç–∞
	NotifyFlightStarted(context.Context, *FlightStartedRequest) (*FlightStartedResponse, error)
	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥—Ä–æ–Ω–∞
	UpdateDronePosition(context.Context, *DronePositionRequest) (*DronePositionResponse, error)
	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–ª–µ—Ç–∞
	NotifyFlightCompleted(context.Context, *FlightCompletedRequest) (*FlightCompletedResponse, error)
	// üö® –ù–û–í–´–ô –ú–ï–¢–û–î: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ
	NotifyRestrictedZoneProximity(context.Context, *RestrictedZoneAlertRequest) (*RestrictedZoneAlertResponse, error)
	mustEmbedUnimplementedFlightNotificationServiceServer()
}

// UnimplementedFlightNotificationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFlightNotificationServiceServer struct{}

func (UnimplementedFlightNotificationServiceServer) NotifyStatusUpdate(context.Context, *StatusUpdateRequest) (*StatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStatusUpdate not implemented")
}
func (UnimplementedFlightNotificationServiceServer) NotifyFlightStarted(context.Context, *FlightStartedRequest) (*FlightStartedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFlightStarted not implemented")
}
func (UnimplementedFlightNotificationServiceServer) UpdateDronePosition(context.Context, *DronePositionRequest) (*DronePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDronePosition not implemented")
}
func (UnimplementedFlightNotificationServiceServer) NotifyFlightCompleted(context.Context, *FlightCompletedRequest) (*FlightCompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyFlightCompleted not implemented")
}
func (UnimplementedFlightNotificationServiceServer) NotifyRestrictedZoneProximity(context.Context, *RestrictedZoneAlertRequest) (*RestrictedZoneAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRestrictedZoneProximity not implemented")
}
func (UnimplementedFlightNotificationServiceServer) mustEmbedUnimplementedFlightNotificationServiceServer() {
}
func (UnimplementedFlightNotificationServiceServer) testEmbeddedByValue() {}

// UnsafeFlightNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightNotificationServiceServer will
// result in compilation errors.
type UnsafeFlightNotificationServiceServer interface {
	mustEmbedUnimplementedFlightNotificationServiceServer()
}

func RegisterFlightNotificationServiceServer(s grpc.ServiceRegistrar, srv FlightNotificationServiceServer) {
	// If the following call pancis, it indicates UnimplementedFlightNotificationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FlightNotificationService_ServiceDesc, srv)
}

func _FlightNotificationService_NotifyStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightNotificationServiceServer).NotifyStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightNotificationService_NotifyStatusUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightNotificationServiceServer).NotifyStatusUpdate(ctx, req.(*StatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightNotificationService_NotifyFlightStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightStartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightNotificationServiceServer).NotifyFlightStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightNotificationService_NotifyFlightStarted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightNotificationServiceServer).NotifyFlightStarted(ctx, req.(*FlightStartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightNotificationService_UpdateDronePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DronePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightNotificationServiceServer).UpdateDronePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightNotificationService_UpdateDronePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightNotificationServiceServer).UpdateDronePosition(ctx, req.(*DronePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightNotificationService_NotifyFlightCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlightCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightNotificationServiceServer).NotifyFlightCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightNotificationService_NotifyFlightCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightNotificationServiceServer).NotifyFlightCompleted(ctx, req.(*FlightCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlightNotificationService_NotifyRestrictedZoneProximity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestrictedZoneAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightNotificationServiceServer).NotifyRestrictedZoneProximity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlightNotificationService_NotifyRestrictedZoneProximity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightNotificationServiceServer).NotifyRestrictedZoneProximity(ctx, req.(*RestrictedZoneAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightNotificationService_ServiceDesc is the grpc.ServiceDesc for FlightNotificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightNotificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flight.FlightNotificationService",
	HandlerType: (*FlightNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyStatusUpdate",
			Handler:    _FlightNotificationService_NotifyStatusUpdate_Handler,
		},
		{
			MethodName: "NotifyFlightStarted",
			Handler:    _FlightNotificationService_NotifyFlightStarted_Handler,
		},
		{
			MethodName: "UpdateDronePosition",
			Handler:    _FlightNotificationService_UpdateDronePosition_Handler,
		},
		{
			MethodName: "NotifyFlightCompleted",
			Handler:    _FlightNotificationService_NotifyFlightCompleted_Handler,
		},
		{
			MethodName: "NotifyRestrictedZoneProximity",
			Handler:    _FlightNotificationService_NotifyRestrictedZoneProximity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fly_service.proto",
}
